import { ParsedOffnightEvent } from './offnightPatternMatcher';
import { CacheManager } from '../cache/cacheManager';
interface ManualEntry {
    content: string;
    date: Date;
    addedAt: number;
}
export declare class OffnightFileManager {
    private readonly filePath;
    private readonly cacheManager;
    constructor(filePath: string, cacheManager: CacheManager);
    /**
     * Formats a single event for file output
     */
    formatEventForFile(event: ParsedOffnightEvent): string;
    /**
     * Parses date from a line in offnight.txt format
     */
    parseDateFromLine(line: string): Date | null;
    /**
     * Reads the current offnight.txt file and identifies manual entries
     * Manual entries are any lines not present in the new bot-generated events
     */
    readManualEntriesExcludingBotEvents(botEvents: ParsedOffnightEvent[]): Promise<ManualEntry[]>;
    /**
     * Determines if a line looks like it was generated by the bot
     * Bot events typically have specific formatting patterns
     */
    private looksLikeBotEvent;
    /**
     * Cleans up past bot-generated events from the offnight.txt file
     * This removes any bot entries that are in the past while preserving manual entries
     */
    cleanupPastBotEvents(): Promise<{
        removedCount: number;
        preservedCount: number;
    }>;
    /**
     * Generates the file content string from events and manual entries
     */
    generateFileContent(events: ParsedOffnightEvent[], manualEntries: ManualEntry[]): string;
    /**
     * Writes events to offnight.txt file, preserving manual entries
     */
    writeOffnightFile(content: string): Promise<void>;
    /**
     * Checks if events have changed and need updating
     */
    hasEventsChanged(newEvents: ParsedOffnightEvent[]): boolean;
    /**
     * Updates the cache with new events
     */
    updateCache(newEvents: ParsedOffnightEvent[], manualEntries: ManualEntry[]): void;
    /**
     * Gets cached events if available
     */
    getCachedEvents(): ParsedOffnightEvent[] | null;
    getCacheManager(): CacheManager;
    /**
     * Syncs the current offnight.txt file to GitHub with error recovery
     */
    syncToGitHub(): Promise<boolean>;
    /**
     * Reads the current offnight.txt file content
     */
    readFile(): Promise<string>;
}
export {};
